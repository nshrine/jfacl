/*
 * UfsAclPanel.java
 *
 * Created on January 23, 2003, 4:01 PM
 */

package uk.ac.bham.cs.security.acl;

import javax.swing.*;
import java.awt.Component;
import javax.swing.event.*;
import java.awt.event.*;
import java.util.*;
import uk.ac.bham.cs.util.SwingWorker;
/**
 *
 * @author  nrs
 */
public class UfsAclPanel extends JPanel implements ListSelectionListener,
        ListCellRenderer, TableModelListener, ActionListener {        
    
    public static final String BASE = System.getProperty("base");
    public static final ImageIcon USER_ICON =
            new ImageIcon(BASE + "/icons/user.png");
    public static final ImageIcon GROUP_ICON =
            new ImageIcon(BASE + "/icons/group.png");
    public static final ImageIcon OTHER_ICON =
            new ImageIcon(BASE + "/icons/other.png");
    public static final ImageIcon MASK_ICON =
            new ImageIcon(BASE + "/icons/mask.png");
    
    public final boolean EDITABLE;
    private boolean changed = false;
    
    private final UfsAclWin parent;
    private final PermTableModel tablemodel;
    private AddDialog adialog;
    private UfsAcl acl = null;
    private int lastSelectedIndex;
    
    /** Creates new form UfsAclPanel */
    public UfsAclPanel(UfsAclWin parent) {
        
        this.parent = parent;
        this.acl = parent.getAcl();
        EDITABLE = acl.isOwner();
        tablemodel = new PermTableModel(EDITABLE);
        tablemodel.addTableModelListener(this);
        initComponents();
        jList1.setListData(acl.toArray());
        jList1.getSelectionModel().addListSelectionListener(this);
        jList1.setCellRenderer(this);
        jList1.setSelectedIndex(lastSelectedIndex);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jCheckBox1 = new javax.swing.JCheckBox();

        setLayout(new java.awt.GridBagLayout());

        addButton.setText("Add...");
        addButton.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        addButton.setMinimumSize(new java.awt.Dimension(70, 25));
        addButton.setPreferredSize(new java.awt.Dimension(70, 25));
        addButton.setEnabled(EDITABLE);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(addButton, gridBagConstraints);

        removeButton.setText("Remove");
        removeButton.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        removeButton.setMinimumSize(new java.awt.Dimension(70, 25));
        removeButton.setPreferredSize(new java.awt.Dimension(70, 25));
        removeButton.setEnabled(false);
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(removeButton, gridBagConstraints);

        jScrollPane1.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jList1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jScrollPane1, gridBagConstraints);

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane2.setPreferredSize(new java.awt.Dimension(300, 400));
        jScrollPane2.setOpaque(false);
        jTable1.setModel(tablemodel);
        jTable1.setPreferredSize(new java.awt.Dimension(300, 400));
        jTable1.setRowHeight(30);
        jTable1.setRowSelectionAllowed(false);
        jTable1.setSelectionBackground(new java.awt.Color(255, 255, 255));
        jTable1.setShowHorizontalLines(false);
        jTable1.setShowVerticalLines(false);
        jScrollPane2.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jScrollPane2, gridBagConstraints);

        jCheckBox1.setSelected(acl.hasDefaults());
        jCheckBox1.setText("Defaults for new files in this directory");
        jCheckBox1.setBorder(null);
        jCheckBox1.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jCheckBox1.setEnabled(acl.ISDIR && EDITABLE);
        jCheckBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox1ItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jCheckBox1, gridBagConstraints);

    }//GEN-END:initComponents

    private void jCheckBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox1ItemStateChanged
        
        //int index = jList1.getSelectedIndex();
        int statechange = evt.getStateChange();
        if((statechange == ItemEvent.SELECTED) && !acl.hasDefaults()) {
            try {
                acl.addDefaults();
                changed = true;
            } catch (UfsAclException ex) {
                JOptionPane.showMessageDialog(this, "Unable to add defaults: " + 
                        ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else if ((statechange == ItemEvent.DESELECTED) && acl.hasDefaults()) {
            if(JOptionPane.showConfirmDialog(this, "Deselecting this option will delete all default ACL entries.\nOK to proceed?",
                                                "Warning", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
                acl.removeDefaults();
                changed = true;
            } else {
                jCheckBox1.setSelected(true);
            }
        }   
        jList1.setListData(acl.toArray());
        /*if(index >= acl.size()) {
            jList1.setSelectedIndex(acl.size() - 1);
        } else {
            jList1.setSelectedIndex(index);
        }*/
    }//GEN-LAST:event_jCheckBox1ItemStateChanged

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        
        //int index = jList1.getSelectedIndex();
        acl.remove(jList1.getSelectedValue());
        changed = true;
        jList1.setListData(acl.toArray());                
        //jList1.repaint();
    }//GEN-LAST:event_removeButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        
        if(adialog == null) {
            final JLabel label = new JLabel();
            final JPanel panel = new JPanel();
            panel.setBorder(new javax.swing.border.TitledBorder("Loading Names"));               
            panel.add(label);
            final JDialog dialog = new JDialog(parent, "Loading Names", false);
            dialog.setUndecorated(true);
            dialog.getContentPane().add(panel);
            dialog.setLocationRelativeTo(null);
            dialog.setSize(150,50);
            dialog.setVisible(true);

            final javax.swing.Timer timer = new javax.swing.Timer(50, new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    label.setText("Found " + UfsAcl.getNameCount() + " names");                               
                }
            });
            timer.start(); 

            SwingWorker worker = new SwingWorker() {
                public Object construct() {                                
                    Collection set = UfsAcl.getall();                
                    timer.stop();                
                    dialog.setVisible(false);
                    adialog = new AddDialog(parent, set, acl.hasDefaults(), true);
                    adialog.setVisible(true);
                    //adialog.repaint();                                
                    return set;
                }
            };
            worker.start();               
        } else {
            adialog.enableDefaultsButton(acl.hasDefaults());
            adialog.setVisible(true);
        }
        
        //jList1.setSelectedIndex(acl.size() - 1);
    }//GEN-LAST:event_addButtonActionPerformed

    public void valueChanged(ListSelectionEvent e) {        
        if (jList1.isSelectionEmpty()) {
            if( lastSelectedIndex >= acl.size()) {
                jList1.setSelectedIndex(acl.size() - 1);
            }  else {
                jList1.setSelectedIndex(lastSelectedIndex);
            }
            return;
        }
        
        UfsAclEntry entry = (UfsAclEntry)jList1.getSelectedValue();
        
        if ((entry.getType() & UfsAclEntry.PRIMARY_MASK) > 0) {
            removeButton.setEnabled(false);
        } else {
            removeButton.setEnabled(EDITABLE);
        }
        
        tablemodel.setPerms(entry.getType(), entry.getPerm(), 
                acl.getEffective(entry));
        lastSelectedIndex = jList1.getSelectedIndex();
    }    
    
    /** Return a component that has been configured to display the specified
     * value. That component's <code>paint</code> method is then called to
     * "render" the cell.  If it is necessary to compute the dimensions
     * of a list because the list cells do not have a fixed size, this method
     * is called to generate a component on which <code>getPreferredSize</code>
     * can be invoked.
     *
     * @param list The JList we're painting.
     * @param value The value returned by list.getModel().getElementAt(index).
     * @param index The cells index.
     * @param isSelected True if the specified cell was selected.
     * @param cellHasFocus True if the specified cell has the focus.
     * @return A component whose paint() method will render the specified value.
     *
     * @see JList
     * @see ListSelectionModel
     * @see ListModel
     *
     */
    public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
        
        UfsAclEntry entry = (UfsAclEntry)value;
        ImageIcon icon = null;
        StringBuffer text = new StringBuffer();
        String name = entry.getName();
        
        switch(entry.getType()) {
            case UfsAclEntry.USER_OBJ: icon = USER_ICON;
                text.append(name + " (Owner)");
                break;
            case UfsAclEntry.USER: icon = USER_ICON;
                text.append(name);
                break;
            case UfsAclEntry.GROUP_OBJ: icon = GROUP_ICON;
                text.append(name + " (Group Owner)");
                break;
            case UfsAclEntry.GROUP: icon = GROUP_ICON;
                text.append(name);
                break;
            case UfsAclEntry.OTHER_OBJ: icon = OTHER_ICON;
                text.append("Others");
                break;
            case UfsAclEntry.CLASS_OBJ: icon = MASK_ICON;
                text.append("Mask (Maximum Permissions)");
                break;
            case UfsAclEntry.DEF_USER_OBJ: icon = USER_ICON;
                text.append("Default: Owner");
                break;
            case UfsAclEntry.DEF_USER: icon = USER_ICON;
                text.append("Default: " + name);
                break;
            case UfsAclEntry.DEF_GROUP_OBJ: icon = GROUP_ICON;
                text.append("Default: Group Owner");
                break;
            case UfsAclEntry.DEF_GROUP: icon = GROUP_ICON;
                text.append("Default: " + name);
                break;    
            case UfsAclEntry.DEF_OTHER_OBJ: icon = OTHER_ICON;
                text.append("Default: Others");
                break;
            case UfsAclEntry.DEF_CLASS_OBJ: icon = MASK_ICON;
                text.append("Default: Mask");
                break;
        }
        
        JLabel label = new JLabel(text.toString(), icon, JLabel.LEFT);
        label.setOpaque(true);
        if(isSelected) {
            label.setBackground(list.getSelectionBackground());
            label.setForeground(list.getSelectionForeground());
        } else {
            label.setBackground(list.getBackground());
            label.setForeground(list.getForeground());
        }
        return label;
    }    
    
    /** This fine grain notification tells listeners the exact range
     * of cells, rows, or columns that changed.
     *
     */
    public void tableChanged(TableModelEvent e) {
        
        if(e.getColumn() == 1) {
            UfsAclEntry entry = (UfsAclEntry)jList1.getSelectedValue();
            boolean read = ((Boolean)jTable1.getValueAt(0,1)).booleanValue();
            boolean write = ((Boolean)jTable1.getValueAt(1,1)).booleanValue();
            boolean execute = ((Boolean)jTable1.getValueAt(2,1)).booleanValue();
            entry.setPerm(new UnixPerm(read, write, execute));
            tablemodel.setPerms(entry.getType(), entry.getPerm(), acl.getEffective(entry));
            changed = true;
        }
    }
    
    public boolean dataChanged() {
        
        return changed;
    }
    
    public void dataSaved() {
        
        changed = false;
    }
    
    /** Invoked when an action occurs.
     *
     */
    public void actionPerformed(ActionEvent e) {
        
        if(e.getActionCommand().equals("OK")) {
            int prevSize = acl.size() - 1;
            int added = 0;
            Enumeration entries = adialog.getSelected();
            while(entries.hasMoreElements()) {                
                UfsAclEntry entry = (UfsAclEntry)entries.nextElement();
                try {                    
                    acl.addEntry(entry);
                    added = 1;
                    changed = true;                    
                } catch (UfsAclException ex) {
                    JOptionPane.showMessageDialog(this, "Unable to add " + entry.getName() + ": " + 
                        ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }            
            if(added > 0) {
                jList1.setListData(acl.toArray());
                jList1.setSelectedIndex(prevSize + added);
            }
            adialog.unDisplay();
        } else if (e.getActionCommand().equals("Cancel")) {
            adialog.unDisplay();
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton removeButton;
    // End of variables declaration//GEN-END:variables
    
}
